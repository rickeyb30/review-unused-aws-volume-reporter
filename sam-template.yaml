AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Parameters:
  SNSTopicName:
    Type: String
    Description: Name of the SNS topic where the report will be published.
    Default: review-unused-volume
  LambdaSchedule:
    Type: String
    Description: |
      CRON expression for when you want the Lambda function to run.
      Default is 4 PM UTC = 9 AM PDT. CRON expression must be in UTC.
    Default: cron(0 16 * * ? *)

Resources:
  UnusedVolumeReporter:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: review-unusedVolume-reporter
      Runtime: python3.6
      Timeout: 900
      Handler: index.lambda_handler
      Policies:
        - AmazonEC2ReadOnlyAccess
        - SNSPublishMessagePolicy:
            TopicName: !Ref SNSTopicName
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${SNSTopicName}
      Events:
        Schedule:
          Type: Schedule
          Properties:
            Name: review-unusedVolume-reporter
            Schedule: !Ref LambdaSchedule
      InlineCode: |
        import boto3
        import os
        from datetime import datetime, timedelta

        ec2 = boto3.client('ec2')
        sns = boto3.client('sns')
        time_now = datetime.now()
        days_check = 60

        def lambda_handler(event, context):
            report = ''
            result = ec2.describe_volumes(Filters=[{'Name': 'status', 'Values': ['available']}])
            for volume in result['Volumes']:
                volId= volume['VolumeId']
                Time = volume['CreateTime']
                time_diff = time_now - Time.replace(tzinfo=None)   
                if 'Tags' not in volume:
                    if time_diff.days > days_check:
                        print('VolumeId -', volId,': Days -', time_diff.days)
                        report += 'VolumeId : {0}, Days : {1}\n'.format(volId,time_diff.days)
                    
            if report:
                print(report)
                sns.publish(TopicArn=os.environ['SNS_TOPIC_ARN'], Subject='Review unused IAM Role', Message=report)
