AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Parameters:
  SNSTopicName:
    Type: String
    Description: Name of the SNS topic where the report will be published.
    Default: review-unused-iam
  LambdaSchedule:
    Type: String
    Description: |
      CRON expression for when you want the Lambda function to run.
      Default is 4 PM UTC = 9 AM PDT. CRON expression must be in UTC.
    Default: cron(0 16 * * ? *)

Resources:
  UnusedIAMReporter:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: review-unusedIAM-reporter
      Runtime: python3.6
      Timeout: 900
      Handler: index.lambda_handler
      Policies:
        - IAMReadOnlyAccess
        - SNSPublishMessagePolicy:
            TopicName: !Ref SNSTopicName
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${SNSTopicName}
      Events:
        Schedule:
          Type: Schedule
          Properties:
            Name: review-unusedIAM-reporter
            Schedule: !Ref LambdaSchedule
      InlineCode: |
        import boto3
        import os
        from datetime import datetime, timedelta

        client = boto3.client('iam')
        resource = boto3.resource('iam')
        sns = boto3.client('sns')
        time_now = datetime.now()
        days_check = 60

        # Get Roles
        roles = client.list_roles()

        def lambda_handler(event, context):
            report = ''

            # Loop through the roles and print it's Last Used date
            for r in roles['Roles']:
                role = resource.Role(name=r['RoleName'])
                try:
                    if role.role_last_used:
                        time_diff = time_now - role.role_last_used['LastUsedDate'].replace(tzinfo=None)    

                        # Check diff is more than or equal to 90 days
                        if time_diff.days > days_check:
                            print('RoleName -', r['RoleName'],':',time_diff.days,'-days')
                            report += 'RoleName : {0}, LastUsedDate : {1}.\n'.format(r['RoleName'],time_diff.days)
                            
                except Exception as e:
                    print(e)
                    pass
                        
            if report:
                print(report)
                sns.publish(TopicArn=os.environ['SNS_TOPIC_ARN'], Subject='Review unused IAM Role', Message=report)
